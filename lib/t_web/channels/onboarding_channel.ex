defmodule TWeb.OnboardingChannel do
  use TWeb, :channel
  alias T.Accounts.User
  alias T.{Accounts, Media}

  # TODO test

  @impl true
  def join("onboarding:" <> user_id, _params, socket) do
    ChannelHelpers.verify_user_id(socket, user_id)
    %User{profile: profile} = Accounts.ensure_profile(socket.assigns.user)
    {:ok, %{profile: render_profile(profile)}, assign(socket, uploads: %{}, profile: profile)}
  end

  defp render_profile(%User.Profile{} = profile) do
    Map.take(profile, [:photos, :name, :gender, :birthdate, :height, :home_city])
  end

  defp render_changeset(%Ecto.Changeset{} = changeset) do
    Ecto.Changeset.traverse_errors(changeset, fn {message, opts} ->
      Regex.replace(~r"%{(\w+)}", message, fn _, key ->
        opts |> Keyword.get(String.to_existing_atom(key), key) |> to_string()
      end)
    end)
  end

  @impl true
  def handle_in("upload-preflight", %{"content-type" => content_type}, socket) do
    # TODO validate content type

    key = Media.public_key()
    # url = T.Media.presigned_url(:put, key)

    {:ok, fields} =
      T.Media.sign_form_upload(
        key: key,
        content_type: content_type,
        max_file_size: 8_000_000,
        expires_in: :timer.hours(1)
      )

    uploads = socket.assigns.uploads
    socket = assign(socket, uploads: Map.put(uploads, key, nil))

    {:reply, {:ok, %{url: Media.url(), key: key, fields: fields}}, socket}
    # {:reply, {:ok, %{url: url, key: key}}, socket}
  end

  def handle_in("get-profile", _params, socket) do
    {:reply, {:ok, %{profile: render_profile(socket.assigns.profile)}}, socket}
  end

  def handle_in("get-step", _params, socket) do
    # TODO better do it in /me?
    {:reply, {:ok, %{step: nil}}, socket}
  end

  def handle_in("add-photos", %{"profile" => params}, socket) do
    profile = socket.assigns.profile

    case Accounts.update_photos(profile, params, validate?: false) do
      {:ok, profile} ->
        {:reply, {:ok, %{profile: render_profile(profile)}}, assign(socket, profile: profile)}

      {:error, changeset} ->
        {:reply, {:error, render_changeset(changeset)}, socket}
    end
  end

  def handle_in("submit-photos", %{"profile" => params}, socket) do
    profile = socket.assigns.profile

    # TODO ensure provided keys exist on s3 and have been generated by this process
    case Accounts.update_photos(profile, params, validate?: true) do
      {:ok, profile} ->
        {:reply, {:ok, %{profile: render_profile(profile)}}, assign(socket, profile: profile)}

      {:error, changeset} ->
        {:reply, {:error, render_changeset(changeset)}, socket}
    end
  end

  def handle_in("submit-general-info", %{"profile" => params}, socket) do
    profile = socket.assigns.profile

    case Accounts.update_general_profile_info(profile, params) do
      {:ok, profile} ->
        {:reply, {:ok, %{profile: render_profile(profile)}}, assign(socket, profile: profile)}

      {:error, changeset} ->
        {:reply, {:error, render_changeset(changeset)}, socket}
    end
  end

  def handle_in("submit-work-and-education-info", %{"profile" => params}, socket) do
    profile = socket.assigns.profile

    case Accounts.update_work_and_education_info(profile, params) do
      {:ok, profile} ->
        {:reply, {:ok, %{profile: render_profile(profile)}}, assign(socket, profile: profile)}

      {:error, changeset} ->
        {:reply, {:error, render_changeset(changeset)}, socket}
    end
  end

  def handle_in("submit-about-self-info", %{"profile" => params}, socket) do
    profile = socket.assigns.profile

    case Accounts.update_about_self_info(profile, params) do
      {:ok, profile} ->
        {:reply, {:ok, %{profile: render_profile(profile)}}, assign(socket, profile: profile)}

      {:error, changeset} ->
        {:reply, {:error, render_changeset(changeset)}, socket}
    end
  end

  def handle_in("submit-tastes", %{"profile" => params}, socket) do
    profile = socket.assigns.profile

    case Accounts.update_tastes(profile, params) do
      {:ok, profile} ->
        {:reply, {:ok, %{profile: render_profile(profile)}}, assign(socket, profile: profile)}

      {:error, changeset} ->
        {:reply, {:error, render_changeset(changeset)}, socket}
    end
  end

  def handle_in("finish-onboarding", _params, socket) do
    case Accounts.finish_onboarding(socket.assigns.user.id) do
      # TODO we can close the channel now
      {:ok, _user} ->
        {:reply, :ok, socket}

      {:error, %Ecto.Changeset{} = changeset} ->
        {:reply, {:error, render_changeset(changeset)}, socket}
    end
  end
end
